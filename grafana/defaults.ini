##################### Grafana Configuration Defaults #####################
#
# Do not modify this file in grafana installs
#

# possible values : production, development
app_mode = development

# instance name, defaults to HOSTNAME environment variable value or hostname if HOSTNAME var is empty
instance_name = ${HOSTNAME}

# force migration will run migrations that might cause dataloss
force_migration = false

#################################### Paths ###############################
[paths]
# Path to where grafana can store temp files, sessions, and the sqlite3 db (if that is used)
data = data

# Temporary files in `data` directory older than given duration will be removed
temp_data_lifetime = 24h

# Directory where grafana can store logs
logs = data/log

# Directory where grafana will automatically scan and look for plugins
plugins = data/plugins

# folder that contains provisioning config files that grafana will apply on startup and while running.
provisioning = conf/provisioning

#################################### Server ##############################
[server]
# Protocol (http, https, h2, socket)
protocol = http

# Minimum TLS version allowed. By default, this value is empty. Accepted values are: TLS1.2, TLS1.3
min_tls_version =

# The ip address to bind to, empty will bind to all interfaces
http_addr =

# The http port to use
http_port = 3000

# The public facing domain name used to access grafana from a browser
domain = localhost

# Redirect to correct domain if host header does not match domain
# Prevents DNS rebinding attacks
enforce_domain = false

# The full public facing url
root_url = %(protocol)s://%(domain)s:%(http_port)s/

# Serve Grafana from subpath specified in `root_url` setting. By default it is set to `false` for compatibility reasons.
serve_from_sub_path = false

# Log web requests
router_logging = false

# the path relative working path
static_root_path = public

# enable gzip
enable_gzip = false

# https certs & key file
cert_file =
cert_key =

# Unix socket gid
# Changing the gid of a file without privileges requires that the target group is in the group of the process and that the process is the file owner
# It is recommended to set the gid as http server user gid
# Not set when the value is -1
socket_gid = -1

# Unix socket mode
socket_mode = 0660

# Unix socket path
socket = /tmp/grafana.sock

# CDN Url
cdn_url =

# Sets the maximum time in minutes before timing out read of an incoming request and closing idle connections.
# `0` means there is no timeout for reading the request.
read_timeout = 0

# This setting enables you to specify additional headers that the server adds to HTTP(S) responses
[server.custom_response_headers]
# exampleHeader = exampleValue

#################################### Database ############################
[database]
# You can configure the database connection by specifying type, host, name, user and password
# as separate properties or as on string using the url property.

# Either "mysql", "postgres" or "sqlite3", it's your choice
type = sqlite3
host = 127.0.0.1:3306
name = grafana
user = root
# If the password contains # or ; you have to wrap it with triple quotes. Ex """#password;"""
password =
# Use either URL or the previous fields to configure the database
# Example: mysql://user:secret@host:port/database
url =

# Max idle conn setting default is 2
max_idle_conn = 2

# Max conn setting default is 0 (mean not set)
max_open_conn =

# Connection Max Lifetime default is 14400 (means 14400 seconds or 4 hours)
conn_max_lifetime = 14400

# Set to true to log the sql calls and execution times.
log_queries = false

# For "postgres", use either "disable", "require" or "verify-full"
# For "mysql", use either "true", "false", or "skip-verify".
ssl_mode = disable

# Database drivers may support different transaction isolation levels.
# Currently, only "mysql" driver supports isolation levels.
# If the value is empty - driver's default isolation level is applied.
isolation_level =

ca_cert_path =
client_key_path =
client_cert_path =
server_cert_name =

# For "sqlite3" only, path relative to data_path setting
path = grafana.db

# For "sqlite3" only. Query timeout during migration, in seconds (default is 0, infinite).
query_timeout = 0

# For "sqlite3" only. cache mode setting used for connecting to the database
cache_mode = private

# For "sqlite3" only. Enable/disable Write-Ahead Logging, https://sqlite.org/wal.html. Default is false.
wal = false

# For "mysql" only if mysql_protocol is set to socket. Socket path to local database
socket_path =

# For "mysql" only if mysql_protocol is set to socket. Socket path to local database
mysql_protocol =

#################################### Cache server #############################
[remote_cache]
# Either "redis", "memcached" or "database" default is "database"
type = database

# cache connectionstring options
# database: will use Grafana primary database.
# redis: config like redis server e.g. `addr=127.0.0.1:6379,pool_size=100,db=0,ssl=false`. Only addr is required. ssl may be 'true', 'false', or 'insecure'.
# memcache: 127.0.0.1:11211
connstr =

# prefix prepended to all the keys in the remote cache
prefix =

# This enables encryption of values stored in the remote cache
encryption = false

#################################### Data proxy ###########################
[dataproxy]

# This enables data proxy logging, default is false
logging = false

# How long the data proxy waits before timing out, default is 30 seconds.
# This setting also applies to core backend HTTP data sources where query requests use an HTTP client with timeout set.
timeout = 30

# How many seconds the data proxy waits before sending a keepalive request.
keep_alive_seconds = 30

# How many seconds the data proxy waits for a successful TLS Handshake before timing out.
tls_handshake_timeout_seconds = 10

# How many seconds the data proxy will wait for a server's first response headers after
# fully writing the request headers if the request has an "Expect: 100-continue"
# header. A value of 0 will result in the body being sent immediately, without
# waiting for the server to approve.
expect_continue_timeout_seconds = 1

# The maximum number of idle connections that Grafana will keep alive.
max_idle_connections = 100

# How many seconds the data proxy keeps an idle connection open before timing out.
idle_conn_timeout_seconds = 90

# If enabled and user is not anonymous, data proxy will add X-Grafana-User header with username into the request.
send_user_header = false

# Limit the amount of bytes that will be read/accepted from responses of outgoing HTTP requests.
response_limit = 0

# Limits the number of rows that Grafana will process from SQL data sources.
row_limit = 1000000

#################################### Analytics ###########################
[analytics]
# Server reporting, sends usage counters to stats.grafana.org every 24 hours.
# No ip addresses are being tracked, only simple counters to track
# running instances, dashboard and error counts. It is very helpful to us.
# Change this option to false to disable reporting.
reporting_enabled = true

# The name of the distributor of the Grafana instance. Ex hosted-grafana, grafana-labs
reporting_distributor = grafana-labs

# Set to false to disable all checks to https://grafana.com
# for new versions of grafana. The check is used
# in some UI views to notify that a Grafana update exists.
# This option does not cause any auto updates, nor send any information
# only a GET request to https://grafana.com to get the latest version.
check_for_updates = true

# Set to false to disable all checks to https://grafana.com
# for new versions of plugins. The check is used
# in some UI views to notify that a plugin update exists.
# This option does not cause any auto updates, nor send any information
# only a GET request to https://grafana.com to get the latest versions of plugins.
check_for_plugin_updates = true

# Google Analytics universal tracking code, only enabled if you specify an id here
google_analytics_ua_id =

# Google Analytics 4 tracking code, only enabled if you specify an id here
google_analytics_4_id =

# Google Tag Manager ID, only enabled if you specify an id here
google_tag_manager_id =

# Rudderstack write key, enabled only if rudderstack_data_plane_url is also set
rudderstack_write_key =

# Rudderstack data plane url, enabled only if rudderstack_write_key is also set
rudderstack_data_plane_url =

# Rudderstack SDK url, optional, only valid if rudderstack_write_key and rudderstack_data_plane_url is also set
rudderstack_sdk_url =

# Rudderstack Config url, optional, used by Rudderstack SDK to fetch source config
rudderstack_config_url =

# When faro_javascript_agent_enabled is set to true, static resources will be loaded from the Grafana CDN
faro_javascript_agent_enabled = false

# Controls if the UI contains any links to user feedback forms
feedback_links_enabled = true

#################################### Security ############################
[security]
# disable creation of admin user on first start of grafana
disable_initial_admin_creation = false

# default admin user, created on startup
admin_user = admin

# default admin password, can be changed before first start of grafana, or in profile settings
admin_password = admin

# default admin email, created on startup
admin_email = admin@localhost

# used for signing
secret_key = SW2YcwTIb9zpOOhoPsMm

# current key used for signing when rotating the secret_key
encryption_alias =

# previous key used for signing when rotating the secret_key
# use a comma-separated list for multiple previous keys
available_encryption_aliases =

# disable gravatar profile images
disable_gravatar = false

# data source proxy whitelist (ip_or_domain:port separated by spaces)
data_source_proxy_whitelist =

# disable protection against brute force login attempts
disable_brute_force_login_protection = false

# set to true if you host Grafana behind HTTPS. default is false.
cookie_secure = false

# set cookie SameSite attribute. defaults to `lax`. can be set to "lax", "strict", "none" and "disabled"
cookie_samesite = lax

# set to true if you want to allow browsers to render Grafana in a <frame>, <iframe>, <embed> or <object>. default is false.
allow_embedding = false

# Set to true if you want to enable http strict transport security (HSTS) response header.
# This is only sent when HTTPS is enabled in this configuration.
# HSTS tells browsers that the site should only be accessed using HTTPS.
strict_transport_security = false

# Sets how long a browser should cache HSTS. Only applied if strict_transport_security is enabled.
strict_transport_security_max_age_seconds = 86400

# Set to true if to enable HSTS preloading option. Only applied if strict_transport_security is enabled.
strict_transport_security_preload = false

# Set to true if to enable the HSTS includeSubDomains option. Only applied if strict_transport_security is enabled.
strict_transport_security_subdomains = false

# Set to true to enable the X-Content-Type-Options response header.
# The X-Content-Type-Options response HTTP header is a marker used by the server to indicate that the MIME types advertised
# in the Content-Type headers should not be changed and be followed.
x_content_type_options = true

# Set to true to enable the X-XSS-Protection header, which tells browsers to stop pages from loading
# when they detect reflected cross-site scripting (XSS) attacks.
x_xss_protection = true

# Enable adding the Content-Security-Policy header to your requests.
# CSP allows to control resources the user agent is allowed to load and helps prevent XSS attacks.
content_security_policy = false

# Set Content Security Policy template used when adding the Content-Security-Policy header to your requests.
# $NONCE in the template includes a random nonce.
# $ROOT_PATH is server.root_url without the protocol.
content_security_policy_template = """script-src 'unsafe-eval' 'strict-dynamic' $NONCE;object-src 'none';font-src 'self';style-src 'self' 'unsafe-inline';img-src 'self' data:;base-uri 'self';connect-src 'self' grafana.com;manifest-src 'self';media-src 'none';form-action 'self';"""

# Enable adding the Content-Security-Policy-Report-Only header to your requests.
# Allows you to monitor the effects of the Content-Security-Policy without enforcing it.
content_security_policy_report_only = false

# Set Content-Security-Policy-Report-Only template used when adding the Content-Security-Policy-Report-Only header to your requests.
# $NONCE in the template includes a random nonce.
# $ROOT_PATH is server.root_url without the protocol.
content_security_policy_report_only_template = """script-src 'unsafe-eval' 'strict-dynamic' $NONCE;object-src 'none';font-src 'self';style-src 'self' 'unsafe-inline';img-src 'self' data:;base-uri 'self';connect-src 'self' grafana.com;manifest-src 'self';media-src 'none';form-action 'self';"""

# Comma-separated list of additional allowed URLs to pass by the CSRF check.
# Suggested when authentication comes from an IdP.
csrf_trusted_origins =

# Comma-separated list of headers that are stripped from the request before forwarding to the plugin.
csrf_additional_headers =

# Controls if old angular plugins are supported or not.
# REMOVED IN v12 - Angular support has been completely removed
# angular_support_enabled = false

# List of additional allowed URLs to pass by the CSRF check
csrf_additional_urls =

# The CSRF cookie name.
csrf_cookie_name = grafana_csrf

# Control whether attributes are enforced in an IdP's login (for example SAML, OAuth, and OIDC) flow.
# When true, the IdP's login flow will only be allowed if required attributes are present, defaults to false.
enforce_attributes_for_login = false

#################################### Snapshots ###########################
[snapshots]
# snapshot sharing options
external_enabled = true
external_snapshot_url = https://snapshots.grafana.net
external_snapshot_name = Publish to snapshots.grafana.net

# Set to true to enable this Grafana instance act as an external snapshot server and allow unauthenticated requests for
# creating and deleting snapshots.
public_mode = false

# remove expired snapshot
snapshot_remove_expired = true

#################################### Dashboards ##################

[dashboards]
# Number dashboard versions to keep (per dashboard). Default: 20, Minimum: 1
versions_to_keep = 20

# Minimum dashboard refresh interval. When set, this will restrict users to set the refresh interval of a dashboard lower than given interval. Per default this is 5 seconds.
# The interval string is a possibly signed sequence of decimal numbers, followed by a unit suffix (ms, s, m, h, d), e.g. 30s or 1m.
min_refresh_interval = 5s

# Path to the default home dashboard. If this value is empty, then Grafana uses StaticRootPath + "dashboards/home.json"
default_home_dashboard_path =

# Default home dashboard is interpreted as JSON/YAML and is available on the /api/dashboards/home endpoint.
# Grafana will rely on the default_home_dashboard_path in case this is missing or invalid, or return the default Grafana home dashboard
default_home_dashboard_json =

################################### Data sources #########################
[datasources]
# Upper limit of data sources that Grafana will return. This limit is a temporary configuration and it will be deprecated when pagination will be introduced on the list data sources API.
datasource_limit = 5000

#################################### Users ###############################
[users]
# disable user signup / registration
allow_sign_up = false

# Allow non admin users to create organizations
allow_org_create = false

# Set to true to automatically assign new users to the default organization (id 1)
auto_assign_org = true

# Set this value to automatically add new users to the provided organization (if auto_assign_org above is set to true)
auto_assign_org_id = 1

# Default role new users will be automatically assigned (if auto_assign_org above is set to true)
auto_assign_org_role = Viewer

# Require email validation before sign up completes
verify_email_enabled = false

# Background text for the user field on the login page
login_hint = email or username
password_hint = password

# Default UI theme ("dark" or "light" or "system")
default_theme = dark

# Default language (supported IETF language tag, such as en-US)
default_language = en-US

# Path to a custom home page. Users are only redirected to this if the default home dashboard is used. It should match a frontend route and contain a leading slash.
home_page =

# External user management
external_manage_link_url =
external_manage_link_name =
external_manage_info =

# Viewers can edit/inspect dashboard settings in the browser. But not save the dashboard.
viewers_can_edit = false

# REMOVED IN v12 - Editors can no longer administrate organizations
# editors_can_admin = false

# The duration in time a user invitation remains valid before expiring. This setting should be expressed as a duration. Examples: 6h (hours), 2d (days), 1w (week). Default is 24h (24 hours). The minimum supported duration is 15m (15 minutes).
user_invite_max_lifetime_duration = 24h

# Enter a comma-separated list of usernames to hide them in the Grafana UI. These users are shown to Grafana admins and to themselves.
hidden_users =

# Enable secretscan feature
secretscan_enabled = false

[auth]
# Login cookie name
login_cookie_name = grafana_session

# Disable usage of Grafana build-in login solution.
disable_login = false

# The maximum lifetime (duration) an authenticated user can be inactive before being required to login at next visit. Default is 7 days (7d). This setting should be expressed as a duration, e.g. 5m (minutes), 6h (hours), 10d (days), 2w (weeks), 1M (month). The lifetime resets at each successful token rotation.
login_maximum_inactive_lifetime_duration =

# The maximum lifetime (duration) an authenticated user can be logged in since login time before being required to login. Default is 30 days (30d). This setting should be expressed as a duration, e.g. 5m (minutes), 6h (hours), 10d (days), 2w (weeks), 1M (month).
login_maximum_lifetime_duration =

# How often should auth tokens be rotated for authenticated users when being active. The default is each 10 minutes.
token_rotation_interval_minutes = 10

# Set to true to disable (hide) the login form, useful if you use OAuth
disable_login_form = false

# Set to true to disable the signout link in the side menu. useful if you use auth.proxy
disable_signout_menu = false

# URL to redirect the user to after sign out
signout_redirect_url =

# Set to true to attempt login with OAuth automatically, skipping the login screen.
# This setting is ignored if multiple OAuth providers are configured.
oauth_auto_login = false

# OAuth state max age cookie duration in seconds. Defaults to 600 seconds.
oauth_state_cookie_max_age = 600

# Skip forced assignment of OrgID 1 or 'auto_assign_org_id' for social logins
oauth_skip_org_role_update_sync = false

# limit of api_key seconds to live before expiration
api_key_max_seconds_to_live = -1

# Set to true to enable SigV4 authentication option for HTTP-based datasources
sigv4_auth_enabled = false

# Set to true to enable verbose logging of SigV4 request signing
sigv4_verbose_logging = false

# Set to true to enable Azure authentication option for HTTP-based datasources
azure_auth_enabled = false

#################################### Anonymous Auth ######################
[auth.anonymous]
# enable anonymous access
enabled = false

# specify organization name that should be used for unauthenticated users
org_name = Main Org.

# specify role for unauthenticated users
org_role = Viewer

# mask the Grafana version number for unauthenticated users
hide_version = false

#################################### GitHub Auth #########################
[auth.github]
name = GitHub
icon = github
enabled = false
allow_sign_up = true
auto_login = false
client_id = some_id
client_secret =
scopes = user:email,read:org
auth_url = https://github.com/login/oauth/authorize
token_url = https://github.com/login/oauth/access_token
api_url = https://api.github.com/user
signout_redirect_url =
allowed_domains =
team_ids =
allowed_organizations =
role_attribute_path =
role_attribute_strict = false
allow_assign_grafana_admin = false
skip_org_role_sync = false
tls_skip_verify_insecure = false
tls_client_cert =
tls_client_key =
tls_client_ca =
use_pkce = true

#################################### GitLab Auth #########################
[auth.gitlab]
name = GitLab
icon = gitlab
enabled = false
allow_sign_up = true
auto_login = false
client_id = some_id
client_secret =
scopes = openid email profile
auth_url = https://gitlab.com/oauth/authorize
token_url = https://gitlab.com/oauth/token
api_url = https://gitlab.com/api/v4
signout_redirect_url =
allowed_domains =
allowed_groups =
role_attribute_path =
role_attribute_strict = false
allow_assign_grafana_admin = false
skip_org_role_sync = false
tls_skip_verify_insecure = false
tls_client_cert =
tls_client_key =
tls_client_ca =
use_pkce = true

#################################### Google Auth #########################
[auth.google]
name = Google
icon = google
enabled = false
allow_sign_up = true
auto_login = false
client_id = some_client_id
client_secret =
scopes = openid email profile
auth_url = https://accounts.google.com/o/oauth2/v2/auth
token_url = https://oauth2.googleapis.com/token
api_url = https://openidconnect.googleapis.com/v1/userinfo
signout_redirect_url =
allowed_domains =
groups_attribute_path =
hosted_domain =
# New in v11: Validate the hd parameter in ID token against the list of allowed domains. Default is true.
validate_hd = true
use_pkce = true

#################################### Azure AD OAuth ####################
[auth.azuread]
name = Microsoft
icon = microsoft
enabled = false
allow_sign_up = true
auto_login = false
client_id = some_client_id
client_secret =
scopes = openid email profile
auth_url = https://login.microsoftonline.com/<tenant-id>/oauth2/v2.0/authorize
token_url = https://login.microsoftonline.com/<tenant-id>/oauth2/v2.0/token
signout_redirect_url =
allowed_domains =
allowed_groups =
allowed_organizations =
role_attribute_strict = false
allow_assign_grafana_admin = false
force_use_graph_api = false
use_pkce = true

#################################### Okta OAuth #######################
[auth.okta]
name = Okta
icon = okta
enabled = false
allow_sign_up = true
auto_login = false
client_id = some_id
client_secret =
scopes = openid profile email groups
auth_url = https://<tenant-id>.okta.com/oauth2/v1/authorize
token_url = https://<tenant-id>.okta.com/oauth2/v1/token
api_url = https://<tenant-id>.okta.com/oauth2/v1/userinfo
signout_redirect_url =
allowed_domains =
allowed_groups =
role_attribute_path =
role_attribute_strict = false
allow_assign_grafana_admin = false
skip_org_role_sync = false
use_pkce = true

#################################### Generic OAuth #######################
[auth.generic_oauth]
name = OAuth
icon = signin
enabled = false
allow_sign_up = true
auto_login = false
client_id = some_id
client_secret =
scopes = user:email
empty_scopes = false
email_attribute_name = email:primary
email_attribute_path =
login_attribute_path =
name_attribute_path =
groups_attribute_path =
id_token_attribute_name =
auth_url =
token_url =
api_url =
signout_redirect_url =
teams_url =
allowed_domains =
team_ids =
allowed_organizations =
role_attribute_path =
role_attribute_strict = false
allow_assign_grafana_admin = false
tls_skip_verify_insecure = false
tls_client_cert =
tls_client_key =
tls_client_ca =
use_pkce = false
auth_style =
allow_groups_sync = false
allowed_groups =

#################################### Basic Auth ##########################
[auth.basic]
enabled = true

#################################### Auth Proxy ##########################
[auth.proxy]
enabled = false
header_name = X-WEBAUTH-USER
header_property = username
auto_sign_up = true
# Deprecated, use sync_ttl instead
# ldap_sync_ttl = 60
sync_ttl = 60
whitelist =
headers =
headers_encoded = false
enable_login_token = false

#################################### Auth JWT ##########################
[auth.jwt]
enabled = false
enable_login_token = false
header_name = X-JWT-Assertion
username_claim = sub
email_claim = sub
jwk_set_url =
jwk_set_file =
cache_ttl = 60m
expect_claims = {}
key_file =
key_id =
role_attribute_path =
role_attribute_strict = false
groups_attribute_path =
allowed_organizations =
auto_sign_up = false
url_login = false
allow_assign_grafana_admin = false
skip_org_role_sync = false

#################################### Auth LDAP ###########################
[auth.ldap]
enabled = false
config_file = /etc/grafana/ldap.toml
allow_sign_up = true

# LDAP background sync (Enterprise only)
# At 1 am every day
sync_cron = "0 0 1 * * *"
active_sync_enabled = true

#################################### Auth SAML ##########################
[auth.saml]
enabled = false
single_logout = false
allow_sign_up = true
certificate =
certificate_path =
private_key =
private_key_path =
signature_algorithm =
idp_metadata =
idp_metadata_path =
idp_metadata_url =
max_issue_delay = 90s
metadata_valid_duration = 48h
relay_state =
assertion_attribute_name =
assertion_attribute_login =
assertion_attribute_email =
assertion_attribute_groups =
assertion_attribute_role =
assertion_attribute_org =
allowed_organizations =
org_mapping =
role_values_none =
role_values_editor =
role_values_admin =
role_values_grafana_admin =
name_id_format =
skip_org_role_sync = false
allow_assign_grafana_admin = false

#################################### AWS ############################
[aws]
# Enter a comma-separated list of allowed AWS authentication providers.
# Options are: default (AWS SDK Default), keys (Access && secret key), credentials (Credentials field), ec2_iam_role (EC2 IAM Role)
allowed_auth_providers = default,keys,credentials

# Allow AWS users to assume a role using temporary security credentials.
# If true, assume role will be enabled for all AWS authentication providers that are specified in aws_auth_providers
assume_role_enabled = true

# Specify max no of pages to be returned by the ListMetricPages API
list_metrics_page_limit = 500

# Experimental, for use in Grafana Cloud only. Please do not set.
sigv4_auth_enabled =
sigv4_verbose_logging =

#################################### Azure ###############################
[azure]
# Azure subscription containing data sources.
subscription =

# Grafana managed identity client id to use for workload identity authentication.
managed_identity_client_id =

# Azure workload identity authentication is enabled for any Azure data sources without existing credentials.
workload_identity_enabled = false

# Azure workload identity tenant id to use for authentication. Defaults to the tenant of the managed identity if not specified.
workload_identity_tenant_id =

# Azure workload identity client id to use for authentication. Defaults to the client id of the managed identity if not specified.
workload_identity_client_id =

# Azure workload identity token file path to use for authentication. Defaults to the path service account token (/var/run/secrets/azure/tokens/azure-identity-token) if not specified.
workload_identity_token_file =

# Azure user identity authentication is enabled for any Azure data sources without existing credentials.
user_identity_enabled = false

# Azure user identity tenant id to use for authentication. Defaults to the tenant of the managed identity if not specified.
user_identity_tenant_id =

# Azure user identity client id to use for authentication. Defaults to the client id of the managed identity if not specified.
user_identity_client_id =

# Azure user identity assertion to use for authentication if user identity authentication is enabled.
user_identity_assertion =

# Azure user identity username to use for authentication if user identity authentication is enabled.
user_identity_username =

#################################### SMTP / Emailing #####################
[smtp]
enabled = false
host = localhost:25
user =
# If the password contains # or ; you have to wrap it with triple quotes. Ex """#password;"""
password =
cert_file =
key_file =
skip_verify = false
from_address = admin@grafana.localhost
from_name = Grafana
ehlo_identity =
startTLS_policy =

[emails]
welcome_email_on_sign_up = false
templates_pattern = emails/*.html
content_types = text/html

#################################### Logging ##########################
[log]
# Either "console", "file", "syslog". Default is console and file
# Use space to separate multiple modes, e.g. "console file"
mode = console file

# Either "debug", "info", "warn", "error", "critical", default is "info"
level = info

# optional settings to set different levels for specific loggers. Ex filters = sqlstore:debug
filters =

# Set the default error message shown to users. This message is displayed instead of sensitive backend errors which should be hidden from users. Default is the same as the sample value.
user_facing_default_error = "please inspect Grafana server log for details"

# For "console" mode only
[log.console]
level =

# log line format, valid options are text, console and json
format = console

# For "file" mode only
[log.file]
level =

# log line format, valid options are text, console and json
format = text

# This enables automated log rotate(switch of following options), default is true
log_rotate = true

# Max line number of single file, default is 1000000
max_lines = 1000000

# Max size shift of single file, default is 28 means 1 << 28, 256MB
max_size_shift = 28

# Segment log daily, default is true
daily_rotate = true

# Expired days of log file(delete after max days), default is 7
max_days = 7

[log.syslog]
level =

# log line format, valid options are text, console and json
format = text

# Syslog network type and address. This can be udp, tcp, or unix. If left blank, the default unix endpoints will be used.
network =
address =

# Syslog facility. user, daemon and local0 through local7 are valid.
facility =

# Syslog tag. By default, the process' argv[0] is used.
tag =

[log.frontend]
# Should Sentry javascript agent be initialized
enabled = false

# Defines which provider to use for Sentry javascript agent, default is Sentry
provider = sentry

# Sentry DSN if you want to send events to Sentry.
sentry_dsn =

# Custom HTTP endpoint to send events captured by the Sentry agent to. Default will log the events to stdout.
custom_endpoint = /log

# Rate of events to be reported between 0 (none) and 1 (all), float
sample_rate = 1.0

# Requests per second limit enforced per an extended period, for Grafana backend log ingestion endpoint (/log).
log_endpoint_requests_per_second_limit = 3

# Max requests accepted per short interval of time for Grafana backend log ingestion endpoint (/log)
log_endpoint_burst_limit = 15

#################################### Usage Quotas ########################
[quota]
enabled = false

#### set quotas to -1 to make unlimited. ####
# limit number of users per Org.
org_user = 10

# limit number of dashboards per Org.
org_dashboard = 100

# limit number of data_sources per Org.
org_data_source = 10

# limit number of api_keys per Org.
org_api_key = 10

# limit number of alerts per Org. DEPRECATED: Alerting quotas are deprecated and will be removed in Grafana v11.
# This quota is now always included in unified alerting.
# org_alert_rule = 100

# limit number of orgs a user can create.
user_org = 10

# Global limit of users.
global_user = -1

# global limit of orgs.
global_org = -1

# global limit of dashboards
global_dashboard = -1

# global limit of api_keys
global_api_key = -1

# global limit on number of logged in users.
global_session = -1

# global limit on number of Grafana-managed alert rules
global_alert_rule = -1

#################################### Unified Alerting ####################
[unified_alerting]
# Enable unified alerting (Grafana 8+ alerting)
enabled = true

# Comma-separated list of organization IDs for which to disable unified alerting. Only supported if unified alerting is enabled.
disabled_orgs =

# Specify the frequency of polling for admin config changes.
# The interval string is a possibly signed sequence of decimal numbers, followed by a unit suffix (ms, s, m, h, d), e.g. 30s or 1m.
admin_config_poll_interval = 60s

# Specify the frequency of polling for Alertmanager config changes.
# The interval string is a possibly signed sequence of decimal numbers, followed by a unit suffix (ms, s, m, h, d), e.g. 30s or 1m.
alertmanager_config_poll_interval = 60s

# The redis server address that should be used for HA. It takes a format of host:port.
ha_redis_address =

# The redis server cluster configuration file.
ha_redis_cluster_config =

# The redis server username that should be used for HA.
ha_redis_username =

# The redis server password that should be used for HA.
ha_redis_password =

# The redis server database that should be used for HA. Defaults to 0.
ha_redis_db =

# A prefix that is used for every key or channel that is created on the Redis server as part of HA.
ha_redis_prefix =

# The name of the cluster peer that will be used as identifier. If none is provided, a random value will be generated.
ha_redis_peer_name =

# The maximum number of simultaneous Redis connections. Defaults to 5.
ha_redis_max_conns = 5

# Enable TLS when communicating with Redis.
ha_redis_tls_enabled = false

# Path to the PEM-encoded TLS client certificate file used to authenticate with the Redis server.
ha_redis_tls_cert_path =

# Path to the PEM-encoded TLS private key file. Also requires client certificate to be configured.
ha_redis_tls_key_path =

# Path to the PEM-encoded TLS CA certificate file. If not set, the host's root CA certificates are used.
ha_redis_tls_ca_path =

# The name of the Redis server certificate.
ha_redis_tls_server_name =

# Skip TLS verification. Defaults to false.
ha_redis_tls_insecure_skip_verify = false

# Cipher suites to use for TLS communication with Redis. Comma-separated list.
ha_redis_tls_cipher_suites =

# The minimum TLS version to use when establishing a connection. Must be either "1.0", "1.1", "1.2", or "1.3". Defaults to "1.2".
ha_redis_tls_min_version =

# Listen address/hostname and port to receive unified alerting messages for other Grafana instances.
# The port is used for both TCP and UDP. Default is "0.0.0.0:9094".
ha_listen_address = "0.0.0.0:9094"

# Explicit address/hostname and port to advertise other Grafana instances.
# The port is used for both TCP and UDP. Default is the value specified for ha_listen_address.
ha_advertise_address =

# Comma-separated list of initial instances (in a format of host:port) that will form the HA cluster.
# Configuring this setting will enable the HA mode for unified alerting.
ha_peers =

# Time to wait for an instance to send a notification via the Alertmanager.
ha_peer_timeout = 15s

# The interval between sending gossip messages. By lowering this value (more frequent) gossip messages are propagated
# across cluster more quickly at the expense of increased bandwidth usage.
ha_gossip_interval = 200ms

# The interval between gossip full state syncs. Setting this interval lower (more frequent) will increase convergence speeds
# across larger clusters at the expense of increased bandwidth usage.
ha_push_pull_interval = 60s

# Enable or disable alerting rule execution. The alerting UI remains visible.
execute_alerts = true

# Default setting for alert calculation timeout. Default value is 30
evaluation_timeout = 30s

# Default setting for max attempts to sending alert notifications. Default value is 3
max_attempts = 3

# Makes it possible to enforce a minimal interval between evaluations, to reduce load on the backend
min_interval = 10s

[unified_alerting.screenshots]
# Enable screenshots in notifications. This option requires that the Grafana image renderer plugin is installed.
capture = false

# The maximum number of screenshots that can be taken at the same time. This option is only used if screenshots are enabled.
max_concurrent_screenshots = 5

# Uploads screenshots to the local Grafana server or remote storage such as Azure, S3 and GCS.
upload_external_image_storage = false

[unified_alerting.reserved_labels]
# Comma-separated list of reserved labels added by the Grafana Alerting engine that should be disabled.
# For example: "disabled_labels=grafana_folder"
disabled_labels =

[unified_alerting.state_history]
# Enable the state history feature in unified alerting, default to true.
enabled = true

# Select the implementation of the state history. Options are "annotations", "loki", and "multiple".
# If "loki" is selected, you must also set the [unified_alerting.state_history.loki] configuration.
# If "multiple" is selected, you must also set the [unified_alerting.state_history.primary]
# and [unified_alerting.state_history.secondaries] configurations.
backend = annotations

# Select the primary implementation of the state history when using "multiple" backend. Options are "annotations" or "loki".
primary =

# Select the secondaries implementations of the state history when using "multiple" backend. Options are "annotations" or "loki".
secondaries =

[unified_alerting.state_history.loki]
# Set the remote Loki address.
remote_url =
# Set the tenant ID for remote Loki.
tenant_id =
# Set the basic auth username for remote Loki.
basic_auth_username =
# Set the basic auth password for remote Loki.
basic_auth_password =
# Path to the file containing the TLS certificate used for client authentication. Requires client_cert_key to be configured.
client_cert_path =
# Path to the file containing the unencrypted TLS key for client authentication. Requires client_cert_path to be configured.
client_cert_key =

#################################### Annotations #########################
[annotations]
# Configures the batch size for the annotation clean-up job. This setting is used for dashboard, API, and alert annotations.
cleanupjob_batchsize = 100

[annotations.dashboard]
# Dashboard annotations means that annotations are associated with the dashboard they are created on.

# Configures how long dashboard annotations are stored. Default is 0, which keeps them forever.
# This setting should be expressed as a duration. Examples: 6h (hours), 10d (days), 2w (weeks), 1M (month).
max_age =

# Configures max number of dashboard annotations that Grafana stores. Default value is 0, which keeps all dashboard annotations.
max_annotations_to_keep =

[annotations.api]
# API annotations means that the annotations have been created using the API without any
# association with a dashboard.

# Configures how long Grafana stores API annotations. Default is 0, which keeps them forever.
# This setting should be expressed as a duration. Examples: 6h (hours), 10d (days), 2w (weeks), 1M (month).
max_age =

# Configures max number of API annotations that Grafana keeps. Default value is 0, which keeps all API annotations.
max_annotations_to_keep =

#################################### Explore #############################
[explore]
# Enable the Explore section
enabled = true

#################################### Help #############################
[help]
# Enable the Help section
enabled = true

#################################### Profile #############################
[profile]
# Enable the Profile section
enabled = true

#################################### News Feed #############################
[news]
# Enable the news feed section
news_feed_enabled = true

#################################### Query caching #############################
[query_caching]
# Enable the query caching feature
enabled = true

#################################### Internal Grafana Metrics ############
# Metrics available at HTTP URL /metrics and /metrics/plugins/:pluginId
[metrics]
enabled              = true
interval_seconds     = 10
# Disable total stats (stat_totals_*) metrics to be generated
disable_total_stats = false

#If both are set, basic auth will be required for the metrics endpoints.
basic_auth_username =
basic_auth_password =

# Metrics environment info adds dimensions to the `grafana_environment_info` metric, which
# can expose more information about the Grafana instance.
[metrics.environment_info]
#exampleLabel1 = exampleValue1
#exampleLabel2 = exampleValue2

# Send internal Grafana metrics to graphite
[metrics.graphite]
# Enable by setting the address setting (ex localhost:2003)
address =
prefix = prod.grafana.%(instance_name)s.

#################################### Grafana.com integration  ##########################
[grafana_net]
url = https://grafana.com

[grafana_com]
url = https://grafana.com

#################################### Distributed tracing ############
[tracing.jaeger]
# jaeger destination (ex localhost:6831)
address =
# tag that will always be included in when creating new spans. ex (tag1:value1,tag2:value2)
always_included_tag =
# Type specifies the type of the sampler: const, probabilistic, rateLimiting, or remote
sampler_type = const
# jaeger samplerconfig param
# for "const" sampler, 0 or 1 for always false/true respectively
# for "probabilistic" sampler, a probability between 0 and 1
# for "rateLimiting" sampler, the number of spans per second
# for "remote" sampler, param is the same as for "probabilistic"
# and indicates the initial sampling rate before the actual one
# is received from the jaeger backend
sampler_param = 1
# sampling_server_url is the URL of a sampling manager providing a sampling strategy.
sampling_server_url =
# Whether or not to use Zipkin span propagation (x-b3- HTTP headers).
zipkin_propagation = false
# Setting this to true disables shared RPC spans.
# Not disabling is the most common setting when using Zipkin elsewhere in your infrastructure.
disable_shared_zipkin_spans = false

[tracing.opentelemetry.jaeger]
# jaeger destination (ex http://localhost:14268/api/traces)
address =
# Propagation defines the text map propagation format: w3c, jaeger
propagation =

[tracing.opentelemetry.otlp]
# otlp destination (ex localhost:4317)
address =
# Propagation defines the text map propagation format: w3c, jaeger
propagation =

#################################### External Image Storage ##############
[external_image_storage]
# Used for uploading images to public servers so they can be included in slack/email messages.
# You can choose between (s3, webdav, gcs, azure_blob, local)
provider =

[external_image_storage.s3]
endpoint =
path_style_access =
bucket_url =
bucket =
region =
path =
access_key =
secret_key =

[external_image_storage.webdav]
url =
username =
password =
public_url =

[external_image_storage.gcs]
key_file =
bucket =
path =
enable_signed_urls = false
signed_url_expiration =

[external_image_storage.azure_blob]
account_name =
account_key =
container_name =
sas_token_expiration_days =

[external_image_storage.local]
# does not require any configuration

[rendering]
# Options to configure a remote HTTP image rendering service, e.g. using https://github.com/grafana/grafana-image-renderer.
# URL to a remote HTTP image renderer service, e.g. http://localhost:8081/render, will enable Grafana to render panels and dashboards to PNG-images using HTTP requests to an external service.
server_url =
# If the remote HTTP image renderer service runs on a different server than the Grafana server you may have to configure this to a URL where Grafana is reachable, e.g. http://grafana.domain/.
callback_url =
# Concurrent render request limit affects when the /render HTTP endpoint is used. Rendering many images at the same time can overload the server,
# which this setting can help protect against by only allowing a certain amount of concurrent requests.
concurrent_render_request_limit = 30

# Determines the lifetime of the render key used by the image renderer to access and render Grafana.
# This value should be less than the remote_cache_ttl in the [plugin.grafana-image-renderer] section to prevent users from accessing and rendering stale data.
render_key_lifetime = 5m

[panels]
# here for to support old env variables, can remove after a few months
enable_alpha = false
disable_sanitize_html = false

[plugins]
enable_alpha = false
app_tls_skip_verify_insecure = false
# Enter a comma-separated list of plugin identifiers to identify plugins to load even if they are unsigned.
allow_loading_unsigned_plugins =
# Enable or disable installing plugins directly from within Grafana
plugin_admin_enabled = true
plugin_admin_external_manage_enabled = false
# Enter a comma-separated list of plugin identifiers to hide specific plugins in the plugins catalog.
plugin_catalog_hidden_plugins =
# Log line information by default for core and plugin logs, default is false.
log_line_info = false
# Force download url for all plugins. This option is useful when it's hard to access grafana.com.
grafana_plugins_cdn_url =
# Enter a comma-separated list of plugin identifiers to avoid loading (will still be discoverable and listed in catalogs).
disable_plugins =
marketplace_url = https://grafana.com/grafana/plugins/
public_key_retrieval_url = https://grafana.com/api/plugins/ci/keys
public_key_retrieval_on_startup = true
[plugin.grafana-image-renderer]
# Instruct headless browser instance to use a default timezone when not provided by Grafana, e.g. when rendering panel image of alert.
# See ICU's metaZones.txt (https://cs.chromium.org/chromium/src/third_party/icu/source/data/misc/metaZones.txt) for a list of supported
# timezone IDs. Fallbacks to TZ environment variable if not set.
rendering_timezone =

# Instruct headless browser instance to use a default language when not provided by Grafana, e.g. when rendering panel image of alert.
# Please refer to the HTTP header Accept-Language to understand how to format this value, e.g. 'fr-CH, fr;q=0.9, en;q=0.8, de;q=0.7, *;q=0.5'.
rendering_language =

# Instruct headless browser instance to use a default device scale factor when not provided by Grafana, e.g. when rendering panel image of alert.
# Default is 1. Using a higher value will produce more detailed images (higher DPI), but will require more disk space to store an image.
rendering_viewport_device_scale_factor =

# Instruct headless browser instance whether to ignore HTTPS errors during navigation. Per default HTTPS errors are not ignored. Due to
# the security risk it's not recommended to ignore HTTPS errors.
rendering_ignore_https_errors =

# Instruct headless browser instance whether to capture and log verbose information when rendering an image. Default is false and will
# only capture and log error messages. When enabled, debug messages are captured and logged as well.
# For the verbose information to be included in the Grafana server log you have to adjust the rendering log level to debug, configure
# [log].filter = rendering:debug.
rendering_verbose_logging =

# Instruct headless browser instance whether to output its debug and error messages into running process of remote rendering service.
# Default is false. This can be useful to enable (true) when troubleshooting.
rendering_dumpio =

# Additional arguments to pass to the headless browser instance. Default is --no-sandbox. The list of Chromium flags can be found
# here (https://peter.sh/experiments/chromium-command-line-switches/). Multiple arguments is separated with comma-character.
rendering_args =

# You can configure the plugin to use a different browser binary instead of the pre-packaged version of Chromium.
# Please note that this is not recommended, since you may encounter problems if the installed version of Chrome/Chromium is not
# compatible with the plugin.
rendering_chrome_bin =

# Instruct how headless browser instances are created. Default is 'default' and will create a new browser instance on each request.
# Mode 'clustered' will make sure that only a maximum of browsers/incognito pages can execute concurrently.
# Mode 'reusable' will have one browser instance and will create a new incognito page on each request.
rendering_mode =

# When rendering_mode = clustered you can instruct how many browsers or incognito pages can execute concurrently. Default is 'browser'
# and will cluster using browser instances.
# Mode 'context' will cluster using incognito pages.
rendering_clustering_mode =
# When rendering_mode = clustered you can define maximum number of browser instances/incognito pages that can execute concurrently.
rendering_clustering_max_concurrency =
# When rendering_mode = clustered you can specify the duration a rendering request can take before it will time out.
rendering_clustering_timeout =

# Limit the maximum viewport width, height and device scale factor that can be requested.
rendering_viewport_max_width =
rendering_viewport_max_height =
rendering_viewport_max_device_scale_factor =

# Change the listening host and port of the gRPC server. Default host is 127.0.0.1 and default port is 0 and will automatically assign
# a port not in use.
grpc_host =
grpc_port =

[enterprise]
enabled = false
license_path =
# When false, disables the writers that write to the Grafana database and the associated features, such as dashboard and data source insights, presence indicators, and advanced dashboard search.
app_insights_enabled = true

# grafana-allow-insecure-email-lookup allows email addresses to be resolved to user identities even when TLS is not used
grafana_allow_insecure_email_lookup = false

[feature_toggles]
# there are currently two ways to enable feature toggles in the `grafana.ini`.
# Enabling feature toggles as a comma-separated list.
# enable = feature1,feature2
enable =

# Some features are enabled by default, see:
# https://grafana.com/docs/grafana/latest/setup-grafana/configure-grafana/feature-toggles/
# The features listed below are disabled by default:
# enable = traceExemplars,memoryMapDisplayDetails

# Enabling feature toggles using the enable key/value format:
# [feature_toggles]
# Enable the feature toggle my_feature_toggle
# my_feature_toggle = true

[date_formats]
# For information on what formatting patterns that are supported https://momentjs.com/docs/#/displaying/

# Default system date format used in time range picker and other places where full time is displayed
full_date = YYYY-MM-DD HH:mm:ss

# Used by graph and other places where we only show small intervals
interval_second = HH:mm:ss
interval_minute = HH:mm
interval_hour = MM/DD HH:mm
interval_day = MM/DD
interval_month = YYYY-MM
interval_year = YYYY

# Experimental feature
use_browser_locale = false

# Default timezone for user preferences. Options are 'browser' for the browser local timezone or a timezone name from IANA Time Zone database, e.g. 'UTC' or 'Europe/Amsterdam' etc.
default_timezone = browser

[expressions]
# Enable or disable the expressions functionality.
enabled = true

[geomap]
# Set the JSON configuration for the default basemap
default_baselayer_config =

# Enable or disable loading other base map layers
enable_custom_baselayers = true

#################################### Support Bundles #################################
[support_bundles]
# Enable support bundle creation (default: true)
enabled = true

# Only server admins can generate and view support bundles (default: true)
server_admin_only = true

# If set, bundles will be encrypted with the provided public keys separated by whitespace
public_keys = ""

#################################### Storage ##########################################
[storage]
# Allow uploading SVG files without sanitization.
allow_unsanitized_svg_upload = false

#################################### Search ##########################################
[search]
# Defines the number of dashboards loaded at once in a batch during a full reindex.
dashboard_loading_batch_size = 200

# Defines the frequency of a full re-index.
full_reindex_interval = 5m

# Defines the time since the last dashboard modification to trigger a re-index.
index_update_wait_time = 10s

#################################### Dashboards History ##############################
[dashboards_versions]
# Path to the dashboard versions data directory (can be relative or absolute)
# Default to data directory
path =

# Enable the dashboard versions backend
enabled = true

# Dashboard versions backend storage
# Options: database, file. Default is database
storage = database

#################################### Live ##############################
[live]
# The maximum number of simultaneous connections to the Live WebSocket endpoint (per Grafana server instance).
# See Grafana Live documentation for more details. Default is -1 (unlimited).
max_connections = -1

# This is an experimental alpha feature.
# The HA (high availability) engine is designed to synchronize the Grafana Live state between multiple Grafana servers.
# Please enable `ha_engine` only if you are testing this alpha feature.
ha_engine =
ha_engine_address = "127.0.0.1:6062"

#################################### Grafana Image Renderer Plugin ##########################
[plugin.grafana-image-renderer]
# Instruct how many seconds the plugin should wait before giving up on rendering an image. Default is 60 seconds.
# This setting can be overridden by setting the "renderingTimeout" parameter in a panel plugin request.
rendering_timeout = 60

#################################### Recorded Queries ############################
[recorded_queries]
# Enabled the recorded queries feature
enabled = true

# Enable recorded queries inside the query editor and dashboards
query_editor_enabled = true

#################################### Query History ############################
[query_history]
# Enable the query history feature
enabled = true

#################################### Analytics ##########################
[analytics.summaries]
# Server reporting, sends domain and some usage stats to stats.grafana.org.
# No IP addresses are sent, only simple counters for Grafana and features usage.
# These counters are sent once every 24 hours.
enabled = true

[analytics.writers]
# This option has been moved from the [enterprise] section.
# When false, disables the writers that write to the Grafana database and the associated features,
# such as dashboard and data source insights, presence indicators, and advanced dashboard search.
enabled = true

#################################### Sentry ##########################
# Experimental for v12, might change in the future without prior notice
[log.frontend.sentry]
# Set rate of tracing for transactions. Should be a value between 0.0 and 1.0.
# 0.0 means no transactions will be sampled. 1.0 means all transactions will be sampled. Default value is 0.01.
# The rate of sampling is per session, which means that the decision of sampling the session will determine if all the transactions within the session will be sampled or not.
traces_sample_rate = 0.01

# Set rate of sampling for errors. Should be a value between 0.0 and 1.0.
# 0.0 means no errors will be sampled. 1.0 means all errors will be sampled. Default value is 0.5
errors_sample_rate = 0.5

#################################### Secure Socks5 Datasource Proxy #################################
[secure_socks_datasource_proxy]
enabled = false
root_ca_cert =
client_cert =
client_key =
server_name =
proxy_address =
show_ui = true

#################################### Data Source Proxy Timeout #################################
[dataproxy.timeout]
# How long should the data proxy wait before timing out default 30 (seconds)
timeout = 30

# How long should the data proxy wait before timing out for dial requests default 10 (seconds)
dial_timeout = 10

# How many seconds the data proxy should wait for a successful TLS Handshake before timing out. Default is 10 (seconds)
tls_handshake_timeout = 10

# How many seconds the data proxy should wait for a server's first response headers. Default is 300 (seconds)
response_header_timeout = 300

# How many seconds the data proxy should wait between when a request finishes and a connection is
# returned to the connection pool. Default is 90 (seconds)
idle_conn_timeout = 90

#################################### Continuous Profiling for Pyroscope ##########################
[profiling.pyroscope]
# Set to true to enable profiling integration.
enabled = false

# Specifies the profiling data source's URL
url =

# Optionally, set custom labels to be included with the profiled data.
# The values may contain environment variable references in the format ${MY_ENV_VAR}
# as well as the instance_name and app_mode placeholders: ${instance_name} and ${app_mode}
# Example: env=${MY_ENV_VAR},instance=${instance_name}
custom_labels =

# Sets the interval between profile collections. Default is 60 seconds.
profile_interval = 60s
